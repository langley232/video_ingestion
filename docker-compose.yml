services:
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin1234
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app-network
    volumes:
      - minio_data:/data
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_PROCESS_ROLES: broker # Add this line
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - ./kafka/server.properties:/etc/kafka/server.properties
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    volumes:
      - zookeeper_data:/data

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    environment:
      OLLAMA_MODELS: "paligemma-2-mix:latest,nomic-embed-text:latest"
      OLLAMA_HOST: "0.0.0.0:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./ollama/entrypoint.sh:/entrypoint.sh
      - ollama_data:/root/.ollama
    entrypoint: ["/entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - app-network

  ingestion:
    build:
      context: ./ingestion
    ports:
      - "8000:8000"
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin1234
      MINIO_BUCKET: videos
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  storage:
    build:
      context: ./storage
    ports:
      - "8001:8001"
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin1234
      MINIO_BUCKET: videos
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      FAISS_INDEX_PATH: /app/faiss/video_index.faiss
      OLLAMA_ENDPOINT: http://ollama:11434
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    volumes:
      - faiss_data:/app/faiss
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - app-network

  query_alert:
    build:
      context: ./query_alert
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin1234
      MINIO_BUCKET: videos
      OLLAMA_ENDPOINT: http://ollama:11434
      STORAGE_ENDPOINT: http://storage:8001
    networks:
      - app-network

  streamlit:
    build:
      context: ./streamlit
    ports:
      - "8501:8501"
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin1234
      MINIO_BUCKET: videos
      INGESTION_ENDPOINT: http://ingestion:8000
      STORAGE_ENDPOINT: http://storage:8001
      OLLAMA_ENDPOINT: http://ollama:11434
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network
    volumes:
      - faiss_data:/app/faiss

  audio_backend:
    build:
      context: ./audio_api/backend
      dockerfile: Dockerfile
    environment:
      - ELEVENLABS_API_KEY=sk_a12b076d3f9c4f02ef432a874ebe914fac0309d259a1fea9
    ports:
      - "8003:8000" # Expose on host port 8003, container port 8000
    networks:
      - app-network # Ensure it's on the same network as other services
    healthcheck: # Optional: Add a healthcheck
       test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
       interval: 30s
       timeout: 10s
       retries: 3
       start_period: 30s

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper_data:
  minio_data:
  ollama_data:
  faiss_data:

